---
// Revolutionary Component Grid - 64 Components with AI Breeding
// Displays all components with drag-and-drop breeding capabilities

export interface Props {
  wsUrl?: string;
  userTier?: 'free' | 'vip' | 'legend' | 'producer';
}

const { 
  wsUrl = 'ws://localhost:8080',
  userTier = 'free'
} = Astro.props;
---

<div class="revolutionary-grid" data-user-tier={userTier}>
  <!-- Grid Header -->
  <div class="grid-header">
    <div class="grid-title">
      <h2>Revolutionary Component System</h2>
      <p>Mix & Match â€¢ AI Breeding â€¢ 64 Components</p>
    </div>
    <div class="grid-controls">
      <button class="control-btn" id="clearSelection">Clear</button>
      <button class="control-btn" id="breedComponents">Breed</button>
      <button class="control-btn" id="showStats">Stats</button>
    </div>
  </div>

  <!-- Breeding Area -->
  <div class="breeding-area" id="breedingArea">
    <div class="breeding-zone" id="breedingZone">
      <div class="breeding-text">
        <span class="breeding-icon">ðŸ§¬</span>
        <span>Drag components here to breed</span>
      </div>
      <div class="selected-components" id="selectedComponents"></div>
    </div>
    <div class="breeding-result" id="breedingResult" style="display: none;">
      <div class="result-header">
        <span class="result-icon">âœ¨</span>
        <span>New Hybrid Created!</span>
      </div>
      <div class="hybrid-display" id="hybridDisplay"></div>
    </div>
  </div>

  <!-- Component Categories -->
  <div class="component-categories">
    <!-- Hypnotic Visual Synchronizers -->
    <div class="category-section" data-category="hypnotic">
      <div class="category-header">
        <span class="category-icon">ðŸŒ€</span>
        <h3>Hypnotic Visual Synchronizers</h3>
        <span class="category-count">16 Components</span>
      </div>
      <div class="component-grid" id="hypnoticGrid">
        <!-- Components 1-16 will be populated by JavaScript -->
      </div>
    </div>

    <!-- Crowd Intelligence Visualizers -->
    <div class="category-section" data-category="crowd">
      <div class="category-header">
        <span class="category-icon">ðŸ§ </span>
        <h3>Crowd Intelligence Visualizers</h3>
        <span class="category-count">16 Components</span>
      </div>
      <div class="component-grid" id="crowdGrid">
        <!-- Components 17-32 will be populated by JavaScript -->
      </div>
    </div>

    <!-- Advanced Environmental Effects -->
    <div class="category-section" data-category="environmental">
      <div class="category-header">
        <span class="category-icon">ðŸŒˆ</span>
        <h3>Advanced Environmental Effects</h3>
        <span class="category-count">16 Components</span>
      </div>
      <div class="component-grid" id="environmentalGrid">
        <!-- Components 33-48 will be populated by JavaScript -->
      </div>
    </div>

    <!-- Fan Engagement Visualizers -->
    <div class="category-section" data-category="engagement">
      <div class="category-header">
        <span class="category-icon">ðŸ•º</span>
        <h3>Fan Engagement Visualizers</h3>
        <span class="category-count">16 Components</span>
      </div>
      <div class="component-grid" id="engagementGrid">
        <!-- Components 49-64 will be populated by JavaScript -->
      </div>
    </div>
  </div>

  <!-- Hybrid Gallery -->
  <div class="hybrid-gallery" id="hybridGallery">
    <div class="gallery-header">
      <h3>ðŸ§¬ Hybrid Gallery</h3>
      <button class="gallery-toggle" id="galleryToggle">Show</button>
    </div>
    <div class="gallery-content" id="galleryContent" style="display: none;">
      <div class="hybrid-list" id="hybridList">
        <!-- Hybrid components will be populated here -->
      </div>
    </div>
  </div>

  <!-- Component Modal -->
  <div class="component-modal" id="componentModal" style="display: none;">
    <div class="modal-content">
      <div class="modal-header">
        <h3 id="modalTitle">Component Details</h3>
        <button class="modal-close" id="modalClose">Ã—</button>
      </div>
      <div class="modal-body" id="modalBody">
        <!-- Component details will be populated here -->
      </div>
    </div>
  </div>

  <!-- Stats Panel -->
  <div class="stats-panel" id="statsPanel" style="display: none;">
    <div class="stats-content">
      <div class="stats-header">
        <h3>ðŸ“Š Breeding Statistics</h3>
        <button class="stats-close" id="statsClose">Ã—</button>
      </div>
      <div class="stats-body" id="statsBody">
        <!-- Stats will be populated here -->
      </div>
    </div>
  </div>
</div>

<style>
  .revolutionary-grid {
    width: 100%;
    min-height: 100vh;
    background: linear-gradient(135deg, #000000, #111111);
    color: #ffffff;
    padding: 20px;
    font-family: 'Arial', sans-serif;
  }

  /* Grid Header */
  .grid-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    padding: 20px;
    background: rgba(0, 255, 0, 0.1);
    border: 1px solid rgba(0, 255, 0, 0.3);
    border-radius: 12px;
  }

  .grid-title h2 {
    margin: 0;
    font-size: 24px;
    color: #00ff00;
    text-shadow: 0 0 10px rgba(0, 255, 0, 0.5);
  }

  .grid-title p {
    margin: 5px 0 0 0;
    font-size: 14px;
    color: #888;
  }

  .grid-controls {
    display: flex;
    gap: 10px;
  }

  .control-btn {
    background: rgba(0, 255, 0, 0.2);
    border: 1px solid rgba(0, 255, 0, 0.5);
    color: #00ff00;
    padding: 8px 16px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 12px;
    transition: all 0.3s ease;
  }

  .control-btn:hover {
    background: rgba(0, 255, 0, 0.3);
    box-shadow: 0 0 10px rgba(0, 255, 0, 0.5);
  }

  /* Breeding Area */
  .breeding-area {
    margin-bottom: 30px;
    padding: 20px;
    background: rgba(255, 255, 255, 0.05);
    border: 2px dashed rgba(0, 255, 0, 0.3);
    border-radius: 12px;
    min-height: 120px;
    position: relative;
  }

  .breeding-zone {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 80px;
  }

  .breeding-text {
    display: flex;
    align-items: center;
    gap: 10px;
    color: #888;
    font-size: 16px;
  }

  .breeding-icon {
    font-size: 24px;
  }

  .selected-components {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 15px;
  }

  .breeding-result {
    position: absolute;
    inset: 0;
    background: rgba(0, 0, 0, 0.95);
    border-radius: 12px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    animation: resultFadeIn 0.5s ease;
  }

  .result-header {
    display: flex;
    align-items: center;
    gap: 10px;
    font-size: 18px;
    color: #00ff00;
    margin-bottom: 20px;
  }

  .result-icon {
    font-size: 24px;
    animation: sparkle 1s ease infinite;
  }

  /* Component Categories */
  .component-categories {
    display: flex;
    flex-direction: column;
    gap: 30px;
  }

  .category-section {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 12px;
    padding: 20px;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .category-header {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }

  .category-icon {
    font-size: 24px;
  }

  .category-header h3 {
    margin: 0;
    flex: 1;
    font-size: 18px;
  }

  .category-count {
    font-size: 12px;
    color: #888;
    background: rgba(255, 255, 255, 0.1);
    padding: 4px 8px;
    border-radius: 12px;
  }

  .component-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 15px;
  }

  /* Component Card */
  .component-card {
    background: rgba(0, 0, 0, 0.7);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 8px;
    padding: 15px;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    user-select: none;
  }

  .component-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 255, 0, 0.3);
    border-color: rgba(0, 255, 0, 0.5);
  }

  .component-card.selected {
    border-color: #00ff00;
    background: rgba(0, 255, 0, 0.1);
    box-shadow: 0 0 15px rgba(0, 255, 0, 0.5);
  }

  .component-card.locked {
    opacity: 0.5;
    cursor: not-allowed;
    filter: grayscale(1);
  }

  .component-card.locked::after {
    content: 'ðŸ”’';
    position: absolute;
    top: 10px;
    right: 10px;
    font-size: 16px;
  }

  .component-name {
    font-size: 14px;
    font-weight: bold;
    margin-bottom: 8px;
    color: #ffffff;
  }

  .component-category {
    font-size: 10px;
    color: #888;
    text-transform: uppercase;
    margin-bottom: 8px;
  }

  .component-stats {
    display: flex;
    justify-content: space-between;
    font-size: 10px;
    color: #aaa;
    margin-bottom: 10px;
  }

  .component-colors {
    display: flex;
    gap: 3px;
    margin-bottom: 8px;
  }

  .color-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    border: 1px solid rgba(255, 255, 255, 0.3);
  }

  .component-tier {
    position: absolute;
    top: 8px;
    right: 8px;
    font-size: 10px;
    padding: 2px 6px;
    border-radius: 10px;
    font-weight: bold;
  }

  .tier-free { background: #666; color: #fff; }
  .tier-vip { background: #0099ff; color: #fff; }
  .tier-legend { background: #ff00ff; color: #fff; }
  .tier-producer { background: #ff6600; color: #fff; }

  /* Hybrid Gallery */
  .hybrid-gallery {
    margin-top: 30px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 12px;
    padding: 20px;
  }

  .gallery-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
  }

  .gallery-toggle {
    background: rgba(0, 255, 0, 0.2);
    border: 1px solid rgba(0, 255, 0, 0.5);
    color: #00ff00;
    padding: 6px 12px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 12px;
  }

  .hybrid-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 15px;
  }

  .hybrid-card {
    background: rgba(255, 0, 255, 0.1);
    border: 1px solid rgba(255, 0, 255, 0.3);
    border-radius: 8px;
    padding: 15px;
    position: relative;
  }

  .hybrid-name {
    font-size: 14px;
    font-weight: bold;
    color: #ff00ff;
    margin-bottom: 8px;
  }

  .hybrid-parents {
    font-size: 10px;
    color: #888;
    margin-bottom: 8px;
  }

  .hybrid-traits {
    display: flex;
    flex-wrap: wrap;
    gap: 4px;
  }

  .trait-tag {
    background: rgba(255, 0, 255, 0.2);
    color: #ff00ff;
    padding: 2px 6px;
    border-radius: 10px;
    font-size: 9px;
  }

  /* Modal Styles */
  .component-modal, .stats-panel {
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
  }

  .modal-content, .stats-content {
    background: #111;
    border: 1px solid rgba(0, 255, 0, 0.5);
    border-radius: 12px;
    max-width: 500px;
    width: 90%;
    max-height: 80vh;
    overflow-y: auto;
  }

  .modal-header, .stats-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }

  .modal-close, .stats-close {
    background: none;
    border: none;
    color: #fff;
    font-size: 24px;
    cursor: pointer;
  }

  .modal-body, .stats-body {
    padding: 20px;
  }

  /* Animations */
  @keyframes resultFadeIn {
    from { opacity: 0; transform: scale(0.9); }
    to { opacity: 1; transform: scale(1); }
  }

  @keyframes sparkle {
    0%, 100% { transform: scale(1) rotate(0deg); }
    50% { transform: scale(1.1) rotate(180deg); }
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .revolutionary-grid {
      padding: 10px;
    }

    .grid-header {
      flex-direction: column;
      gap: 15px;
      text-align: center;
    }

    .component-grid {
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
      gap: 10px;
    }

    .breeding-area {
      padding: 15px;
    }
  }
</style>

<script define:vars={{ wsUrl, userTier }}>
  // Import the breeding engine
  import { breedingEngine } from './ComponentBreedingEngine.ts';

  class RevolutionaryComponentGrid {
    constructor() {
      this.breedingEngine = breedingEngine;
      this.selectedComponents = [];
      this.ws = null;
      this.userTier = userTier;
      
      // DOM elements
      this.breedingZone = document.getElementById('breedingZone');
      this.selectedComponentsContainer = document.getElementById('selectedComponents');
      this.breedingResult = document.getElementById('breedingResult');
      this.hybridDisplay = document.getElementById('hybridDisplay');
      this.hybridGallery = document.getElementById('hybridGallery');
      this.hybridList = document.getElementById('hybridList');
      this.componentModal = document.getElementById('componentModal');
      this.statsPanel = document.getElementById('statsPanel');
      
      this.init();
    }

    init() {
      this.connectWebSocket();
      this.renderComponents();
      this.setupEventListeners();
      this.updateHybridGallery();
    }

    connectWebSocket() {
      try {
        this.ws = new WebSocket(wsUrl);
        
        this.ws.onopen = () => {
          console.log('Revolutionary Grid connected to WebSocket');
          this.ws.send(JSON.stringify({
            type: 'grid-register',
            userTier: this.userTier
          }));
        };

        this.ws.onmessage = (event) => {
          const data = JSON.parse(event.data);
          this.handleWebSocketMessage(data);
        };

      } catch (error) {
        console.warn('WebSocket connection failed:', error);
      }
    }

    handleWebSocketMessage(data) {
      switch (data.type) {
        case 'component-update':
          this.updateComponent(data.componentId, data.updates);
          break;
        case 'hybrid-created':
          this.displayNewHybrid(data.hybrid);
          break;
      }
    }

    renderComponents() {
      const categories = [
        { id: 'hypnoticGrid', category: 'hypnotic' },
        { id: 'crowdGrid', category: 'crowd' },
        { id: 'environmentalGrid', category: 'environmental' },
        { id: 'engagementGrid', category: 'engagement' }
      ];

      categories.forEach(({ id, category }) => {
        const grid = document.getElementById(id);
        const components = this.breedingEngine.getComponentsByCategory(category);
        
        grid.innerHTML = components.map(component => 
          this.createComponentCard(component)
        ).join('');
      });
    }

    createComponentCard(component) {
      const isAccessible = this.isComponentAccessible(component);
      const colors = component.colors.map(color => 
        `<div class="color-dot" style="background: ${color}"></div>`
      ).join('');

      return `
        <div class="component-card ${!isAccessible ? 'locked' : ''}" 
             data-component-id="${component.id}"
             draggable="${isAccessible}">
          <div class="component-tier tier-${component.tier}">${component.tier.toUpperCase()}</div>
          <div class="component-category">${component.category}</div>
          <div class="component-name">${component.name}</div>
          <div class="component-stats">
            <span>Energy: ${component.energySignature}%</span>
            <span>${component.visualStyle}</span>
          </div>
          <div class="component-colors">${colors}</div>
        </div>
      `;
    }

    isComponentAccessible(component) {
      const tierHierarchy = ['free', 'vip', 'legend', 'producer'];
      const userLevel = tierHierarchy.indexOf(this.userTier);
      const componentLevel = tierHierarchy.indexOf(component.tier);
      return userLevel >= componentLevel;
    }

    setupEventListeners() {
      // Component selection
      document.addEventListener('click', (e) => {
        const card = e.target.closest('.component-card');
        if (card && !card.classList.contains('locked')) {
          this.toggleComponentSelection(card.dataset.componentId);
        }
      });

      // Drag and drop
      document.addEventListener('dragstart', (e) => {
        const card = e.target.closest('.component-card');
        if (card) {
          e.dataTransfer.setData('text/plain', card.dataset.componentId);
        }
      });

      this.breedingZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        this.breedingZone.style.borderColor = 'rgba(0, 255, 0, 0.8)';
      });

      this.breedingZone.addEventListener('dragleave', () => {
        this.breedingZone.style.borderColor = 'rgba(0, 255, 0, 0.3)';
      });

      this.breedingZone.addEventListener('drop', (e) => {
        e.preventDefault();
        const componentId = e.dataTransfer.getData('text/plain');
        this.addToBreeding(componentId);
        this.breedingZone.style.borderColor = 'rgba(0, 255, 0, 0.3)';
      });

      // Control buttons
      document.getElementById('clearSelection').addEventListener('click', () => {
        this.clearSelection();
      });

      document.getElementById('breedComponents').addEventListener('click', () => {
        this.breedSelectedComponents();
      });

      document.getElementById('showStats').addEventListener('click', () => {
        this.showStats();
      });

      // Gallery toggle
      document.getElementById('galleryToggle').addEventListener('click', () => {
        this.toggleGallery();
      });

      // Modal close
      document.getElementById('modalClose').addEventListener('click', () => {
        this.closeModal();
      });

      document.getElementById('statsClose').addEventListener('click', () => {
        this.closeStats();
      });

      // Component details
      document.addEventListener('dblclick', (e) => {
        const card = e.target.closest('.component-card');
        if (card) {
          this.showComponentDetails(card.dataset.componentId);
        }
      });
    }

    toggleComponentSelection(componentId) {
      const index = this.selectedComponents.indexOf(componentId);
      const card = document.querySelector(`[data-component-id="${componentId}"]`);
      
      if (index === -1) {
        if (this.selectedComponents.length < 8) {
          this.selectedComponents.push(componentId);
          card.classList.add('selected');
        }
      } else {
        this.selectedComponents.splice(index, 1);
        card.classList.remove('selected');
      }
      
      this.updateBreedingDisplay();
    }

    addToBreeding(componentId) {
      if (!this.selectedComponents.includes(componentId) && this.selectedComponents.length < 8) {
        this.selectedComponents.push(componentId);
        this.updateBreedingDisplay();
        
        // Update visual selection
        const card = document.querySelector(`[data-component-id="${componentId}"]`);
        if (card) card.classList.add('selected');
      }
    }

    updateBreedingDisplay() {
      if (this.selectedComponents.length === 0) {
        this.selectedComponentsContainer.innerHTML = '';
        return;
      }

      const selectedHTML = this.selectedComponents.map(id => {
        const component = this.breedingEngine.getComponent(id);
        return `
          <div class="selected-component" data-id="${id}">
            <span>${component.name}</span>
            <button onclick="revolutionaryGrid.removeFromBreeding('${id}')" style="margin-left: 8px; background: none; border: none; color: #ff0000; cursor: pointer;">Ã—</button>
          </div>
        `;
      }).join('');

      this.selectedComponentsContainer.innerHTML = selectedHTML;
    }

    removeFromBreeding(componentId) {
      const index = this.selectedComponents.indexOf(componentId);
      if (index !== -1) {
        this.selectedComponents.splice(index, 1);
        this.updateBreedingDisplay();
        
        // Update visual selection
        const card = document.querySelector(`[data-component-id="${componentId}"]`);
        if (card) card.classList.remove('selected');
      }
    }

    clearSelection() {
      this.selectedComponents.forEach(id => {
        const card = document.querySelector(`[data-component-id="${id}"]`);
        if (card) card.classList.remove('selected');
      });
      
      this.selectedComponents = [];
      this.updateBreedingDisplay();
      this.hideBreedingResult();
    }

    async breedSelectedComponents() {
      if (this.selectedComponents.length < 2) {
        alert('Select at least 2 components to breed!');
        return;
      }

      try {
        // Use simple breeding for real-time response
        const hybrid = this.breedingEngine.simpleBreed(this.selectedComponents);
        
        if (hybrid) {
          this.displayBreedingResult(hybrid);
          this.updateHybridGallery();
          
          // Send to WebSocket
          if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify({
              type: 'hybrid-created',
              hybrid: hybrid,
              userTier: this.userTier
            }));
          }
        } else {
          alert('Breeding failed! Try different components.');
        }
      } catch (error) {
        console.error('Breeding error:', error);
        alert('Breeding error occurred!');
      }
    }

    displayBreedingResult(hybrid) {
      const colors = hybrid.colors.map(color => 
        `<div class="color-dot" style="background: ${color}"></div>`
      ).join('');

      const traits = hybrid.uniqueTraits.map(trait => 
        `<span class="trait-tag">${trait}</span>`
      ).join('');

      this.hybridDisplay.innerHTML = `
        <div class="hybrid-card">
          <div class="hybrid-name">${hybrid.name}</div>
          <div class="component-stats">
            <span>Energy: ${hybrid.energySignature}%</span>
            <span>${hybrid.visualStyle}</span>
          </div>
          <div class="component-colors">${colors}</div>
          <div class="hybrid-traits">${traits}</div>
          <div class="hybrid-parents">
            Parents: ${hybrid.parentIds.length} components
          </div>
        </div>
      `;

      this.breedingResult.style.display = 'flex';
      
      // Auto-hide after 5 seconds
      setTimeout(() => {
        this.hideBreedingResult();
      }, 5000);
    }

    hideBreedingResult() {
      this.breedingResult.style.display = 'none';
    }

    updateHybridGallery() {
      const hybrids = this.breedingEngine.getAllHybrids();
      
      if (hybrids.length === 0) {
        this.hybridList.innerHTML = '<p style="text-align: center; color: #888;">No hybrids created yet</p>';
        return;
      }

      this.hybridList.innerHTML = hybrids.map(hybrid => {
        const traits = hybrid.uniqueTraits.map(trait => 
          `<span class="trait-tag">${trait}</span>`
        ).join('');

        return `
          <div class="hybrid-card" data-hybrid-id="${hybrid.id}">
            <div class="hybrid-name">${hybrid.name}</div>
            <div class="hybrid-parents">
              From: ${hybrid.parentIds.length} components
            </div>
            <div class="component-stats">
              <span>Energy: ${hybrid.energySignature}%</span>
              <span>Popularity: ${hybrid.popularity}</span>
            </div>
            <div class="hybrid-traits">${traits}</div>
          </div>
        `;
      }).join('');
    }

    toggleGallery() {
      const content = document.getElementById('galleryContent');
      const toggle = document.getElementById('galleryToggle');
      
      if (content.style.display === 'none') {
        content.style.display = 'block';
        toggle.textContent = 'Hide';
      } else {
        content.style.display = 'none';
        toggle.textContent = 'Show';
      }
    }

    showComponentDetails(componentId) {
      const component = this.breedingEngine.getComponent(componentId);
      if (!component) return;

      const suggestions = this.breedingEngine.getBreedingSuggestions(componentId, this.userTier);
      
      document.getElementById('modalTitle').textContent = component.name;
      document.getElementById('modalBody').innerHTML = `
        <div class="component-details">
          <div class="detail-section">
            <h4>Properties</h4>
            <p><strong>Category:</strong> ${component.category}</p>
            <p><strong>Visual Style:</strong> ${component.visualStyle}</p>
            <p><strong>Interaction:</strong> ${component.interactionType}</p>
            <p><strong>Audio Response:</strong> ${component.audioResponse}</p>
            <p><strong>Social Level:</strong> ${component.socialLevel}</p>
            <p><strong>Energy:</strong> ${component.energySignature}%</p>
            <p><strong>Memory:</strong> ${component.memoryCapacity}</p>
            <p><strong>Tier:</strong> ${component.tier}</p>
          </div>
          
          <div class="detail-section">
            <h4>Effects</h4>
            <p>${component.effects.join(', ')}</p>
          </div>
          
          <div class="detail-section">
            <h4>Animations</h4>
            <p>${component.animations.join(', ')}</p>
          </div>
          
          <div class="detail-section">
            <h4>Breeding Suggestions</h4>
            <div class="suggestions-grid">
              ${suggestions.map(suggestion => `
                <div class="suggestion-card" onclick="revolutionaryGrid.addToBreeding('${suggestion.id}')">
                  <div class="suggestion-name">${suggestion.name}</div>
                  <div class="suggestion-compatibility">Compatibility: High</div>
                </div>
              `).join('')}
            </div>
          </div>
        </div>
      `;

      this.componentModal.style.display = 'flex';
    }

    showStats() {
      const stats = this.breedingEngine.getBreedingStats();
      
      document.getElementById('statsBody').innerHTML = `
        <div class="stats-grid">
          <div class="stat-item">
            <div class="stat-value">${stats.totalComponents}</div>
            <div class="stat-label">Total Components</div>
          </div>
          <div class="stat-item">
            <div class="stat-value">${stats.totalHybrids}</div>
            <div class="stat-label">Hybrids Created</div>
          </div>
          <div class="stat-item">
            <div class="stat-value">${stats.totalBreedings}</div>
            <div class="stat-label">Breeding Attempts</div>
          </div>
          <div class="stat-item">
            <div class="stat-value">${Math.round(stats.successRate * 100)}%</div>
            <div class="stat-label">Success Rate</div>
          </div>
        </div>
        
        <div class="popular-hybrids">
          <h4>Popular Hybrids</h4>
          ${stats.popularHybrids.map(hybrid => `
            <div class="popular-hybrid">
              <span>${hybrid.name}</span>
              <span>Popularity: ${hybrid.popularity}</span>
            </div>
          `).join('')}
        </div>
      `;

      this.statsPanel.style.display = 'flex';
    }

    closeModal() {
      this.componentModal.style.display = 'none';
    }

    closeStats() {
      this.statsPanel.style.display = 'none';
    }

    displayNewHybrid(hybrid) {
      // Display notification for new hybrid from other users
      console.log('New hybrid created by another user:', hybrid);
      this.updateHybridGallery();
    }

    updateComponent(componentId, updates) {
      // Update component properties
      const component = this.breedingEngine.getComponent(componentId);
      if (component) {
        Object.assign(component, updates);
        this.renderComponents();
      }
    }
  }

  // Initialize the Revolutionary Component Grid
  const revolutionaryGrid = new RevolutionaryComponentGrid();
  
  // Expose to window for external control
  window.revolutionaryGrid = revolutionaryGrid;
</script>

<style>
  /* Additional styles for modal content */
  .component-details {
    color: #fff;
  }

  .detail-section {
    margin-bottom: 20px;
  }

  .detail-section h4 {
    color: #00ff00;
    margin-bottom: 10px;
    font-size: 16px;
  }

  .detail-section p {
    margin: 5px 0;
    font-size: 14px;
    line-height: 1.4;
  }

  .suggestions-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 10px;
    margin-top: 10px;
  }

  .suggestion-card {
    background: rgba(0, 255, 0, 0.1);
    border: 1px solid rgba(0, 255, 0, 0.3);
    border-radius: 6px;
    padding: 10px;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .suggestion-card:hover {
    background: rgba(0, 255, 0, 0.2);
    border-color: rgba(0, 255, 0, 0.5);
  }

  .suggestion-name {
    font-size: 12px;
    font-weight: bold;
    margin-bottom: 4px;
  }

  .suggestion-compatibility {
    font-size: 10px;
    color: #888;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
    margin-bottom: 30px;
  }

  .stat-item {
    text-align: center;
    background: rgba(0, 255, 0, 0.1);
    border: 1px solid rgba(0, 255, 0, 0.3);
    border-radius: 8px;
    padding: 20px;
  }

  .stat-value {
    font-size: 24px;
    font-weight: bold;
    color: #00ff00;
    margin-bottom: 5px;
  }

  .stat-label {
    font-size: 12px;
    color: #888;
  }

  .popular-hybrids h4 {
    color: #ff00ff;
    margin-bottom: 15px;
  }

  .popular-hybrid {
    display: flex;
    justify-content: space-between;
    padding: 8px 0;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    font-size: 14px;
  }

  .selected-component {
    background: rgba(0, 255, 0, 0.2);
    border: 1px solid rgba(0, 255, 0, 0.5);
    border-radius: 6px;
    padding: 8px 12px;
    font-size: 12px;
    display: flex;
    align-items: center;
    gap: 8px;
  }
</style>
