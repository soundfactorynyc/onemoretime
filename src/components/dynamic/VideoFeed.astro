---
// VideoFeed.astro - Main DJ video feed component
export interface Props {
  class?: string;
  title?: string;
  subtitle?: string;
}

const { 
  class: className = '', 
  title = "ðŸŽµ Legendary DJ Live",
  subtitle = "Main Stage"
} = Astro.props;
---

<div class={`video-feed ${className}`}>
  <!-- Video placeholder - replace with actual video stream -->
  <div class="video-container">
    <div class="video-placeholder">
      <div class="video-icon">ðŸŽµ</div>
      <div class="video-title">{title}</div>
      <div class="video-subtitle">{subtitle}</div>
    </div>
    
    <!-- Video overlay info -->
    <div class="video-overlay">
      <div class="live-badge">
        <span class="live-dot"></span>
        LIVE
      </div>
      <div class="viewer-count">
        <span class="viewer-icon">ðŸ‘¥</span>
        <span id="viewer-count">1,247</span>
      </div>
    </div>
  </div>
</div>

<style>
  .video-feed {
    position: relative;
    width: 100%;
    height: 100%;
    background: #000;
    overflow: hidden;
  }

  .video-container {
    position: relative;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  .video-placeholder {
    text-align: center;
    color: white;
    z-index: 2;
  }

  .video-icon {
    font-size: 120px;
    margin-bottom: 20px;
    opacity: 0.9;
    animation: float 3s ease-in-out infinite;
  }

  .video-title {
    font-size: 28px;
    font-weight: 700;
    margin-bottom: 8px;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  }

  .video-subtitle {
    font-size: 18px;
    opacity: 0.8;
    font-weight: 400;
  }

  .video-overlay {
    position: absolute;
    top: 20px;
    left: 20px;
    right: 20px;
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    z-index: 10;
  }

  .live-badge {
    background: rgba(255, 71, 87, 0.9);
    color: white;
    padding: 8px 12px;
    border-radius: 16px;
    font-size: 12px;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    display: flex;
    align-items: center;
    gap: 6px;
    backdrop-filter: blur(10px);
    box-shadow: 0 4px 12px rgba(255, 71, 87, 0.3);
  }

  .live-dot {
    width: 8px;
    height: 8px;
    background: white;
    border-radius: 50%;
    animation: pulse 2s infinite;
  }

  .viewer-count {
    background: rgba(0, 0, 0, 0.6);
    color: white;
    padding: 8px 12px;
    border-radius: 16px;
    font-size: 14px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 6px;
    backdrop-filter: blur(10px);
  }

  .viewer-icon {
    font-size: 12px;
  }

  /* Animations */
  @keyframes float {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-10px);
    }
  }

  @keyframes pulse {
    0%, 100% {
      opacity: 1;
      transform: scale(1);
    }
    50% {
      opacity: 0.7;
      transform: scale(1.1);
    }
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .video-icon {
      font-size: 80px;
    }
    
    .video-title {
      font-size: 24px;
    }
    
    .video-subtitle {
      font-size: 16px;
    }
    
    .video-overlay {
      top: 10px;
      left: 10px;
      right: 10px;
    }
  }

  /* Replace this section when integrating actual video */
  /*
  .video-container video {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  */
</style>

<script>
  // Video feed controller
  class VideoFeedController {
    private viewerCount: HTMLElement | null;
    private initialCount: number;
    
    constructor() {
      this.viewerCount = document.getElementById('viewer-count');
      this.initialCount = 1247;
      this.startViewerCountAnimation();
    }

    private startViewerCountAnimation() {
      if (!this.viewerCount) return;
      
      // Simulate live viewer count changes
      setInterval(() => {
        const change = Math.floor(Math.random() * 21) - 10; // -10 to +10
        this.initialCount = Math.max(100, this.initialCount + change);
        
        if (this.viewerCount) {
          this.viewerCount.textContent = this.formatViewerCount(this.initialCount);
        }
      }, 5000); // Update every 5 seconds
    }

    private formatViewerCount(count: number): string {
      if (count >= 1000) {
        return (count / 1000).toFixed(1) + 'k';
      }
      return count.toString();
    }

    public setViewerCount(count: number) {
      this.initialCount = count;
      if (this.viewerCount) {
        this.viewerCount.textContent = this.formatViewerCount(count);
      }
    }
  }

  // Initialize when DOM is ready
  let videoFeedController: VideoFeedController;
  
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      videoFeedController = new VideoFeedController();
      (window as any).videoFeedController = videoFeedController;
    });
  } else {
    videoFeedController = new VideoFeedController();
    (window as any).videoFeedController = videoFeedController;
  }

  // Listen for reactions to add visual effects to video
  window.addEventListener('reactionTriggered', (e: CustomEvent) => {
    const { emoji, intensity } = e.detail;
    console.log(`Video feed received reaction: ${emoji} with intensity ${intensity}`);
    
    // Could add video overlay effects here
    // For example: screen flash, particle effects, etc.
  });
</script>
