---
// Simple Chat Support for Sound Factory
---

<div id="liveChatWidget" class="chat-widget">
    <!-- Chat Toggle Button -->
    <button id="chatToggle" class="chat-toggle" aria-label="Open live chat support">
        <svg class="chat-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"/>
        </svg>
        <span class="chat-badge" id="chatBadge">!</span>
    </button>

    <!-- Chat Window -->
    <div id="chatWindow" class="chat-window hidden">
        <!-- Chat Header -->
        <div class="chat-header">
            <div class="chat-header-info">
                <h3>Sound Factory Support</h3>
                <p class="chat-status">
                    <span class="status-dot online"></span>
                    Live support available
                </p>
            </div>
            <button id="chatClose" class="chat-close" aria-label="Close chat">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <line x1="18" y1="6" x2="6" y2="18"/>
                    <line x1="6" y1="6" x2="18" y2="18"/>
                </svg>
            </button>
        </div>

        <!-- Chat Messages -->
        <div id="chatMessages" class="chat-messages">
            <div class="message bot-message">
                <div class="message-avatar">
                    <span>ðŸŽµ</span>
                </div>
                <div class="message-content">
                    <p>Welcome to Sound Factory Support! How can I help you today?</p>
                    <span class="message-time">Now</span>
                </div>
            </div>
        </div>

        <!-- Typing Indicator -->
        <div id="typingIndicator" class="typing-indicator hidden">
            <span class="typing-dots">
                <span></span>
                <span></span>
                <span></span>
            </span>
            Support team is typing...
        </div>

        <!-- Chat Input -->
        <div class="chat-input-container">
            <div class="chat-input-wrapper">
                <input 
                    type="text" 
                    id="chatInput" 
                    placeholder="Type your message..."
                    maxlength="500"
                >
                <button id="chatSend" class="chat-send" aria-label="Send message">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                        <line x1="22" y1="2" x2="11" y2="13"/>
                        <polygon points="22,2 15,22 11,13 2,9 22,2"/>
                    </svg>
                </button>
            </div>
        </div>
    </div>
</div>

<style>
.chat-widget {
    position: fixed;
    bottom: 180px; /* Positioned under middle area */
    left: 50%;
    transform: translateX(-50%);
    z-index: 10000;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

.chat-toggle {
    width: 52px; /* Slightly smaller for mobile */
    height: 52px;
    background: #000000;
    border: 2px solid #ffffff;
    border-radius: 50%;
    color: white;
    cursor: pointer;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    transition: all 0.3s ease;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    touch-action: manipulation;
}

.chat-toggle:hover {
    transform: scale(1.1);
    box-shadow: 0 6px 25px rgba(0, 0, 0, 0.4);
}

.chat-icon {
    width: 24px;
    height: 24px;
}

.chat-badge {
    position: absolute;
    top: -5px;
    right: -5px;
    background: #ff4757;
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    font-weight: bold;
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0% { transform: scale(1); opacity: 1; }
    50% { transform: scale(1.2); opacity: 0.7; }
    100% { transform: scale(1); opacity: 1; }
}

.chat-window {
    position: fixed;
    bottom: 0;
    right: 0;
    width: 100vw;
    height: 100vh;
    background: #1a1a1a;
    border-radius: 0;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.5);
    display: flex;
    flex-direction: column;
    overflow: hidden;
    border: none;
    transform: translateX(100%);
    transition: transform 0.3s ease;
}

.chat-window.hidden {
    transform: translateX(100%);
}

.chat-window:not(.hidden) {
    transform: translateX(0);
}

.chat-header {
    background: #000000;
    color: white;
    padding: 16px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.chat-header-info h3 {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
}

.chat-status {
    margin: 4px 0 0 0;
    font-size: 12px;
    opacity: 0.9;
    display: flex;
    align-items: center;
    gap: 6px;
}

.status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: #2ed573;
    animation: pulse 2s infinite;
}

.chat-close {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    padding: 4px;
    border-radius: 4px;
    transition: background 0.2s;
}

.chat-close:hover {
    background: rgba(255, 255, 255, 0.1);
}

.chat-close svg {
    width: 20px;
    height: 20px;
}

.chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 16px;
    background: #1a1a1a;
}

.message {
    display: flex;
    gap: 12px;
    margin-bottom: 16px;
}

.message-avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background: #000000;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 16px;
    flex-shrink: 0;
}

.user-message .message-avatar {
    background: #333;
    order: 2;
}

.user-message {
    flex-direction: row-reverse;
}

.message-content {
    background: #2a2a2a;
    padding: 12px 16px;
    border-radius: 12px;
    max-width: 80%;
    color: #fff;
}

.user-message .message-content {
    background: #000000;
}

.message-content p {
    margin: 0 0 4px 0;
    font-size: 14px;
    line-height: 1.4;
}

.message-time {
    font-size: 11px;
    opacity: 0.6;
}

.typing-indicator {
    padding: 16px;
    color: #999;
    font-size: 12px;
    display: flex;
    align-items: center;
    gap: 8px;
}

.typing-indicator.hidden {
    display: none;
}

.typing-dots {
    display: flex;
    gap: 3px;
}

.typing-dots span {
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background: #666;
    animation: typing 1.4s infinite ease-in-out;
}

.typing-dots span:nth-child(1) { animation-delay: -0.32s; }
.typing-dots span:nth-child(2) { animation-delay: -0.16s; }
.typing-dots span:nth-child(3) { animation-delay: 0s; }

@keyframes typing {
    0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; }
    40% { transform: scale(1); opacity: 1; }
}

.chat-input-container {
    padding: 16px;
    background: #2a2a2a;
    border-top: 1px solid #333;
}

.chat-input-wrapper {
    display: flex;
    gap: 8px;
}

#chatInput {
    flex: 1;
    background: #1a1a1a;
    border: 1px solid #333;
    border-radius: 20px;
    padding: 10px 16px;
    color: #fff;
    font-size: 14px;
    outline: none;
    transition: border-color 0.2s;
}

#chatInput:focus {
    border-color: #666;
}

#chatInput::placeholder {
    color: #666;
}

.chat-send {
    background: #000000;
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.2s;
}

.chat-send:hover {
    transform: scale(1.1);
}

.chat-send svg {
    width: 18px;
    height: 18px;
}

/* Mobile Responsive */
@media (max-width: 768px) {
    .chat-window {
        width: calc(100vw - 40px);
        height: calc(100vh - 120px);
        bottom: 80px;
        right: 20px;
    }
}

/* Animation for opening/closing */
.chat-window.opening {
    animation: slideUp 0.3s ease-out;
}

@keyframes slideUp {
    from {
        transform: translateY(20px);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}
</style>

<script>
interface ChatMessage {
    content: string;
    sender: 'user' | 'bot';
    time: string;
}

declare global {
    interface Window {
        liveChatSystem: LiveChatSystem;
    }
}

class LiveChatSystem {
    private isOpen: boolean;
    private messages: ChatMessage[];
    constructor() {
        this.isOpen = false;
        this.messages = [];
        this.init();
    }
    
    init() {
        this.setupEventListeners();
        this.showWelcomeMessage();
    }
    
    setupEventListeners() {
        const chatToggle = document.getElementById('chatToggle');
        const chatClose = document.getElementById('chatClose');
        const chatInput = document.getElementById('chatInput') as HTMLInputElement;
        const chatSend = document.getElementById('chatSend');
        
        chatToggle?.addEventListener('click', () => this.toggleChat());
        chatClose?.addEventListener('click', () => this.closeChat());
        chatSend?.addEventListener('click', () => this.sendMessage());
        
        chatInput?.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.sendMessage();
            }
        });
    }
    
    toggleChat() {
        const chatWindow = document.getElementById('chatWindow');
        const chatBadge = document.getElementById('chatBadge');
        
        if (this.isOpen) {
            this.closeChat();
        } else {
            chatWindow?.classList.remove('hidden');
            chatWindow?.classList.add('opening');
            chatBadge?.style.setProperty('display', 'none');
            this.isOpen = true;
            
            setTimeout(() => {
                chatWindow?.classList.remove('opening');
            }, 300);
            
            document.getElementById('chatInput')?.focus();
        }
    }
    
    closeChat() {
        const chatWindow = document.getElementById('chatWindow');
        chatWindow?.classList.add('hidden');
        this.isOpen = false;
    }
    
    sendMessage() {
        const input = document.getElementById('chatInput') as HTMLInputElement | null;
        if (!input) return;
        
        const message = input.value.trim();
        
        if (!message) return;
        
        this.addMessage(message, 'user');
        input.value = '';
        
        this.showTypingIndicator();
        
        setTimeout(() => {
            this.hideTypingIndicator();
            this.processUserMessage(message);
        }, Math.random() * 1000 + 500);
    }
    
    addMessage(content: string, sender: 'user' | 'bot' = 'bot', time: string | null = null) {
        const messagesContainer = document.getElementById('chatMessages');
        if (!messagesContainer) return;

        const messageTime = time || new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        
        const messageHTML = `
            <div class="message ${sender}-message">
                <div class="message-avatar">
                    <span>${sender === 'user' ? 'ðŸ‘¤' : 'ðŸŽµ'}</span>
                </div>
                <div class="message-content">
                    <p>${content}</p>
                    <span class="message-time">${messageTime}</span>
                </div>
            </div>
        `;
        
        messagesContainer.insertAdjacentHTML('beforeend', messageHTML);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        
        this.messages.push({ content, sender, time: messageTime });
    }
    
    showTypingIndicator() {
        const indicator = document.getElementById('typingIndicator');
        indicator?.classList.remove('hidden');
    }
    
    hideTypingIndicator() {
        const indicator = document.getElementById('typingIndicator');
        indicator?.classList.add('hidden');
    }
    
    processUserMessage(message: string) {
        const lowerMessage = message.toLowerCase();
        let response = "I'll help you with that. ";
        
        // Simple response logic for common issues
        if (lowerMessage.includes('card') || lowerMessage.includes('payment')) {
            response += "For payment issues, please:\n1. Check your card details\n2. Ensure sufficient funds\n3. Contact your bank if needed";
        }
        else if (lowerMessage.includes('login') || lowerMessage.includes('password')) {
            response += "For login issues:\n1. Try clearing your cache\n2. Reset your password\n3. Contact support if problems persist";
        }
        else if (lowerMessage.includes('slow') || lowerMessage.includes('loading')) {
            response += "To improve performance:\n1. Refresh your browser\n2. Clear cache and cookies\n3. Check your internet connection";
        }
        else {
            response += "How can I assist you with Sound Factory today?";
        }
        
        this.addMessage(response);
    }
    
    showWelcomeMessage() {
        setTimeout(() => {
            this.addMessage("Welcome to Sound Factory Support! How can I help you today?");
        }, 1000);
    }
}

// Initialize the chat system when the page loads
document.addEventListener('DOMContentLoaded', () => {
    window.liveChatSystem = new LiveChatSystem();
});
</script>
