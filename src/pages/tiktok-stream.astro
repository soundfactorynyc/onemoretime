---
// Sound Factory NYC - TikTok Stream Platform
import BlackGrid from '../components/BlackGrid.astro';
import SimpleReactionSystem from '../components/dynamic/reactions/SimpleReactionSystem.astro';
import SimpleGroupChat from '../components/SimpleGroupChat.astro';
import NextLevelTikTokPlayer from '../components/NextLevelTikTokPlayer.jsx';
---

<html lang="en">
<head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover" />
    <title>Sound Factory NYC - Live Stream</title>
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
        }
        
        html, body {
            position: fixed;
            width: 100%;
            height: 100%;
            background: #000000;
            color: #ffffff;
            overflow: hidden;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
        
        /* Prevent pull-to-refresh on mobile */
        body {
            overscroll-behavior-y: none;
        }
        
        /* Pure black background */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: #000000;
            z-index: -1;
            pointer-events: none;
        }

        /* Player containers */
        .player-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 500;
        }
        
    </style>
</head>
<body>
    <!-- TIKTOK PLAYER CONTAINER -->
    <div id="tikTokContainer" class="player-container">
        <NextLevelTikTokPlayer client:load />
    </div>

    <!-- HOMEBASE CONTAINER (Always visible except in TikTok-only mode) -->
    <div class="homebase-container" style="position: fixed; bottom: 0; left: 0; right: 0; z-index: 600;">
        <!-- SIMPLE REACTION SYSTEM -->
        <SimpleReactionSystem />
        <!-- SIMPLE GROUP CHAT -->
        <SimpleGroupChat />
    </div>


    <!-- OVERLAY GRID SYSTEM -->
    <div id="harmonyOverlaySystem">
        <style>
            /* Overlay System Styles */
            #harmonyOverlaySystem * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
                -webkit-tap-highlight-color: transparent;
            }

            /* Three numbered buttons - TOP ALIGNED */
            .overlay-main-button {
                position: fixed;
                left: 8px; /* Moved further left from 15px */
                background: #000000;
                color: #ffffff;
                border: 1px solid #333333;
                width: 50px;
                height: 50px;
                border-radius: 50%;
                cursor: pointer;
                font-size: 24px;
                font-weight: bold;
                z-index: 1000;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.3s ease;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            }

            .overlay-main-button:hover {
                background: #1a1a1a;
                transform: scale(1.1);
            }

            .overlay-main-button:active {
                transform: scale(0.9);
                background: #2a2a2a;
            }

            /* Special embedded button styling */
            .overlay-embedded-special {
                background: linear-gradient(135deg, #1a1a1a, #0a0a0a);
                border: 2px solid #444444;
                box-shadow: 
                    inset 0 1px 0 rgba(255, 255, 255, 0.1),
                    inset 0 -1px 0 rgba(0, 0, 0, 0.5),
                    0 4px 8px rgba(0, 0, 0, 0.3);
                position: relative;
                overflow: hidden;
            }

            .overlay-embedded-special::before {
                content: '';
                position: absolute;
                top: -50%;
                left: -50%;
                width: 200%;
                height: 200%;
                background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.05), transparent);
                animation: shimmer 3s infinite;
                pointer-events: none;
            }

            .overlay-embedded-special:hover {
                background: linear-gradient(135deg, #2a2a2a, #1a1a1a);
                box-shadow: 
                    inset 0 1px 0 rgba(255, 255, 255, 0.15),
                    inset 0 -1px 0 rgba(0, 0, 0, 0.6),
                    0 6px 12px rgba(0, 0, 0, 0.4);
                transform: scale(1.05);
            }

            .overlay-embedded-special:active {
                background: linear-gradient(135deg, #0a0a0a, #2a2a2a);
                box-shadow: 
                    inset 0 2px 4px rgba(0, 0, 0, 0.8),
                    inset 0 -1px 0 rgba(255, 255, 255, 0.05);
                transform: scale(0.95);
            }

            @keyframes shimmer {
                0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
                100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
            }

            /* Button Positions - Moved down from top */
            .overlay-button-1 { top: 120px; }
            .overlay-button-2 { top: 180px; }
            .overlay-button-3 { top: 240px; }

            /* Grid Overlays */
            .overlay-grid-overlay {
                position: fixed;
                inset: 0;
                background: rgba(0, 0, 0, 0.95);
                opacity: 0;
                visibility: hidden;
                transition: all 0.3s ease;
                z-index: 999;
                display: flex;
                align-items: center;
                justify-content: center;
                backdrop-filter: blur(10px);
            }

            .overlay-grid-overlay.active {
                opacity: 1;
                visibility: visible;
            }

            /* 8x8 Grid Container */
            .overlay-grid-container {
                display: grid;
                grid-template-columns: repeat(8, 1fr);
                grid-template-rows: repeat(8, 1fr);
                gap: 5px;
                width: min(90vw, 90vh);
                height: min(90vw, 90vh);
                padding: 10px;
            }

            /* Grid Buttons */
            .overlay-grid-button {
                background: #000000;
                color: #ffffff;
                border: 1px solid #333333;
                border-radius: 8px;
                cursor: pointer;
                font-size: 16px;
                font-weight: 500;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.2s ease;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            }

            .overlay-grid-button:hover {
                background: #1a1a1a;
                transform: scale(1.05);
                border-color: #666;
            }

            .overlay-grid-button:active {
                transform: scale(0.95);
                background: #2a2a2a;
            }

            /* Close button */
            .overlay-close-button {
                position: absolute;
                top: 20px;
                right: 20px;
                background: #000000;
                color: #ffffff;
                border: 1px solid #333333;
                width: 50px;
                height: 50px;
                border-radius: 50%;
                cursor: pointer;
                font-size: 30px;
                z-index: 1001;
                display: flex;
                align-items: center;
                justify-content: center;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                transition: all 0.3s ease;
            }

            .overlay-close-button:hover {
                background: #1a1a1a;
                transform: rotate(90deg);
            }

            .overlay-close-button:active {
                transform: scale(0.9) rotate(180deg);
            }

            /* Mobile optimizations */
            @media (max-width: 768px) {
                .overlay-main-button {
                    width: 45px;
                    height: 45px;
                    font-size: 20px;
                }
                
                .overlay-button-1 { top: 115px; }
                .overlay-button-2 { top: 170px; }
                .overlay-button-3 { top: 225px; }
                
                .overlay-grid-container {
                    gap: 3px;
                }
                
                .overlay-grid-button {
                    font-size: 12px;
                }
            }
        </style>

        <!-- Three Specialized Buttons -->
        <button class="overlay-main-button overlay-button-1" onclick="overlayToggleGrid(1)">
            <span style="font-size: 10px; font-weight: 600; letter-spacing: 0.5px;">LIVE</span>
        </button>
        <button class="overlay-main-button overlay-button-2" onclick="overlayToggleGrid(2)">
            <span style="font-size: 12px; font-weight: bold;">TT</span>
        </button>
        <button class="overlay-main-button overlay-button-3 overlay-embedded-special" onclick="overlayToggleGrid(3)">3</button>

        <!-- Grid Overlay 1 -->
        <div class="overlay-grid-overlay" id="overlay-grid-1">
            <button class="overlay-close-button" onclick="overlayCloseGrid(1)">×</button>
            <div class="overlay-grid-container" id="overlay-container-1"></div>
        </div>

        <!-- Grid Overlay 2 -->
        <div class="overlay-grid-overlay" id="overlay-grid-2">
            <button class="overlay-close-button" onclick="overlayCloseGrid(2)">×</button>
            <div class="overlay-grid-container" id="overlay-container-2"></div>
        </div>

        <!-- Grid Overlay 3 -->
        <div class="overlay-grid-overlay" id="overlay-grid-3">
            <button class="overlay-close-button" onclick="overlayCloseGrid(3)">×</button>
            <div class="overlay-grid-container" id="overlay-container-3"></div>
        </div>
    </div>

    <script>
        // Mini Toggle Functionality
        document.addEventListener('DOMContentLoaded', function() {
            const miniToggle = document.getElementById('miniToggle');
            const tikTokContainer = document.getElementById('tikTokContainer');
            const owncastContainer = document.getElementById('owncastContainer');
            let isOwncast = true; // Start with Owncast mode

            // Set initial toggle state
            if (miniToggle) {
                miniToggle.classList.add('owncast');
            }

            if (miniToggle) {
                miniToggle.addEventListener('click', function() {
                    isOwncast = !isOwncast;
                    console.log('Toggle clicked, isOwncast:', isOwncast);
                    
                    if (isOwncast) {
                        // Switch to Owncast mode
                        miniToggle.classList.add('owncast');
                        if (tikTokContainer) {
                            tikTokContainer.classList.add('hidden');
                            console.log('TikTok hidden');
                        }
                        if (owncastContainer) {
                            owncastContainer.classList.remove('hidden');
                            console.log('Owncast shown');
                        }
                    } else {
                        // Switch to TikTok mode
                        miniToggle.classList.remove('owncast');
                        if (owncastContainer) {
                            owncastContainer.classList.add('hidden');
                            console.log('Owncast hidden');
                        }
                        if (tikTokContainer) {
                            tikTokContainer.classList.remove('hidden');
                            console.log('TikTok shown');
                        }
                    }
                });
            }
        });

        // Initialize grid buttons
        function initializeOverlayGrids() {
            for (let gridNum = 1; gridNum <= 3; gridNum++) {
                const container = document.getElementById(`overlay-container-${gridNum}`);
                if (container) {
                    for (let i = 1; i <= 64; i++) {
                        const button = document.createElement('button');
                        button.className = 'overlay-grid-button';
                        button.textContent = i.toString();
                        button.onclick = () => overlayHandleButton(gridNum, i);
                        container.appendChild(button);
                    }
                }
            }
        }

        // Toggle grid visibility
        function overlayToggleGrid(gridNumber) {
            const grid = document.getElementById(`overlay-grid-${gridNumber}`);
            if (grid) {
                const isActive = grid.classList.contains('active');
                
                // Close all grids first
                for (let i = 1; i <= 3; i++) {
                    const gridElement = document.getElementById(`overlay-grid-${i}`);
                    if (gridElement) {
                        gridElement.classList.remove('active');
                    }
                }
                
                // If it wasn't active, open it
                if (!isActive) {
                    grid.classList.add('active');
                }
            }
        }

        // Close grid
        function overlayCloseGrid(gridNumber) {
            const grid = document.getElementById(`overlay-grid-${gridNumber}`);
            if (grid) {
                grid.classList.remove('active');
            }
        }

        // Handle button clicks
        function overlayHandleButton(gridNumber, buttonNumber) {
            console.log(`Grid ${gridNumber}, Button ${buttonNumber} clicked`);
            
            // Add your custom logic here
            // Example: different actions for different grids
            switch(gridNumber) {
                case 1:
                    console.log(`Grid 1 Action: Button ${buttonNumber}`);
                    // Add your Grid 1 specific actions
                    break;
                case 2:
                    console.log(`Grid 2 Action: Button ${buttonNumber}`);
                    // Add your Grid 2 specific actions
                    break;
                case 3:
                    console.log(`Grid 3 Action: Button ${buttonNumber}`);
                    // Add your Grid 3 specific actions
                    break;
            }
            
            // Optional: close grid after selection
            // overlayCloseGrid(gridNumber);
        }

        // Close grids on overlay click
        document.querySelectorAll('.overlay-grid-overlay').forEach(overlay => {
            overlay.addEventListener('click', function(e) {
                if (e.target === overlay) {
                    const gridId = overlay.id;
                    const gridNumber = parseInt(gridId.split('-')[2]);
                    overlayCloseGrid(gridNumber);
                }
            });
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                for (let i = 1; i <= 3; i++) {
                    overlayCloseGrid(i);
                }
            } else if (e.key >= '1' && e.key <= '3') {
                overlayToggleGrid(parseInt(e.key));
            }
        });

        // Initialize when DOM is ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeOverlayGrids);
        } else {
            initializeOverlayGrids();
        }

        // Make functions global so they can be called from onclick handlers
        (window as any).overlayToggleGrid = overlayToggleGrid;
        (window as any).overlayCloseGrid = overlayCloseGrid;
        (window as any).overlayHandleButton = overlayHandleButton;
    </script>
</body>
</html>
